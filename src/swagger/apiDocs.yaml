openapi: 3.0.0
info:
  title: Swagger API Documents
  description: API manager
  version: 1.0.0

tags:
  - name: auth
  - name: users
  - name: actors
  - name: books
  - name: categories
  - name: invoices
  - name: invoiceDetails
  - name: bookmedias
  - name: uploadImg

servers:
  - url: http://localhost:3000

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  # API Auth
  /api/auth/login:
    post:
      summary: Login by email and password
      tags:
        - auth
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: String
                password:
                  type: String
              example: { "email": "abc@gmail.com", "password": "abcde" }
      responses:
        "201":
          description: login successfully!!!
        "400":
          description: Login Failed!!!

  /api/auth/register:
    post:
      summary: Register
      tags:
        - auth
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: String
                email:
                  type: String
                password:
                  type: String
                role:
                  type: String
              required:
                - userName
                - email
                - password
                - role
              example:
                {
                  "userName": "abcxyz",
                  "email": "abc@gmail.com",
                  "password": "abcde",
                  "role": "User",
                }
      responses:
        "201":
          description: Register successfully!!!
        "400":
          description: Register Failed!!!

          # Google******************************************
  /api/auth/login/google:
    get:
      summary: login with google
      description: ""
      tags:
        - auth
      responses:
        "302":
          description: "Redirect to Google authentication!!!"

  /api/auth/login/google/callback:
    get:
      summary: "Google OAuth callback"
      description: "Handles authentication response from Google."
      tags:
        - auth
      parameters:
        - in: query
          name: state
          schema:
            type: string
          description: "State parameter to maintain user session."
      responses:
        "200":
          description: "Successfully authenticated with Google."
        "400":
          description: "Login failed."
        "500":
          description: "Server error during authentication."

  /api/auth/refreshToken:
    post:
      summary: Register
      tags:
        - auth
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: String
              required:
                - refreshToken
              example: { "refreshToken": "string" }
      responses:
        "201":
          description: Create new token successfully!!!
        "400":
          description: Failed!!!

  #API Users====================================================
  /api/users:
    get:
      summary: Get all users
      tags:
        - users
      responses:
        "200":
          description: List of all users
          content:
            application/json:
              schema:
                type: object

  /api/users/profile:
    get:
      summary: Get profile
      tags:
        - users
      # parameters:
      #   - in: header
      #     name: Authorization
      #     schema:
      #       type: string
      #     required: true
      #     description: Bearer token
      responses:
        "200":
          description: Profile user
          content:
            application/json:
              schema:
                type: object

  /api/users/{id}:
    get:
      summary: Get an users by ID
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                type: object
              properties: {}
        "404":
          description: User not found
  # API Actors =================================================
  /api/actors:
    get:
      summary: Get all actors
      tags:
        - actors
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of all actors
          content:
            application/json:
              schema:
                type: object

    post:
      summary: Create a new actor
      tags:
        - actors
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actorName:
                  type: string
              example: { "actorName": "George R.R. Martin" }
      responses:
        "201":
          description: Actor created successfully!!!
        "400":
          description: Actor name already in data!!!

  /api/actors/{id}:
    get:
      summary: Get an actor by ID
      tags:
        - actors
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Actor details
          content:
            application/json:
              schema:
                type: object
              properties: {}
        "404":
          description: Actor not found

    put:
      summary: Update an actor by ID
      tags:
        - actors
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            properties:
              actorName:
                type: string
            example: { "actorName": "Update in here" }
      responses:
        "200":
          description: Actor updated successfully
        "404":
          description: Actor not found

    delete:
      summary: Delete an actor by ID
      tags:
        - actors
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Actor deleted successfully
        "404":
          description: Actor id don't exits
        "400":
          description: Bad resquest in data

  # API BookMedia =========================================================
  /api/bookmedias:
    get:
      summary: Get all book media
      tags:
        - bookmedias
      responses:
        "200":
          description: List of all book media
          content:
            application/json:
              schema:
                type: object

    post:
      summary: Create a new book media
      tags:
        - bookmedias
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                origin:
                  type: string
              example: { "origin": "Viet Nam" }
      responses:
        "201":
          description: Book media origin created successfully!!!
        "404":
          description: Book media origin already in data!!!

  /api/bookmedias/{id}:
    get:
      summary: Get an book media by ID
      tags:
        - bookmedias
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Book media details
          content:
            application/json:
              schema:
                type: object
              properties: {}
        "404":
          description: Book media not found

    put:
      summary: Update an book media by ID
      tags:
        - bookmedias
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            properties:
              origin:
                type: string
            example: { "origin": "Update in here" }
      responses:
        "200":
          description: Book media updated successfully
        "404":
          description: Book media not found

    delete:
      summary: Delete an book media by ID
      tags:
        - bookmedias
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Book media deleted successfully
        "404":
          description: Book media id don't exits
        "400":
          description: Bad resquest in data
  #API uploadImage for book
  /api/uploadImg:
    post:
      summary: Upload book images to Cloudinary
      tags:
        - uploadImg
      description: Upload multiple images and get their URLs.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Upload multiple images
      responses:
        "200":
          description: Images uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Images uploaded successfully!"
                  imageUrls:
                    type: array
                    items:
                      type: string
                      example: "https://res.cloudinary.com/.../image.png"
        "400":
          description: Image upload failed

  # API Books ==================================================================================================================================
  /api/books:
    get:
      summary: Get all books
      tags:
        - books
      responses:
        "200":
          description: List of all books
          content:
            application/json:
              schema:
                type: array

    post:
      summary: Create a new book
      tags:
        - books
      description: Create a new book with an uploaded image or an image URL.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                bookName:
                  type: string
                description:
                  type: string
                price:
                  type: number
                categoryName:
                  type: string
                actorName:
                  type: string
                origin:
                  type: string
                quantity:
                  type: number
                image:
                  type: string
                  format: binary
                  description: Upload an image file.
              required:
                - bookName
                - description
                - price
                - categoryName
                - actorName
                - origin
          application/json:
            schema:
              type: object
              properties:
                bookName:
                  type: string
                description:
                  type: string
                price:
                  type: number
                categoryName:
                  type: string
                actorName:
                  type: string
                origin:
                  type: string
                quantity:
                  type: number
                imageUrl:
                  type: string
                  example: "https://res.cloudinary.com/.../image.png"
              required:
                - bookName
                - description
                - price
                - categoryName
                - actorName
                - origin
      responses:
        "201":
          description: Book created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book created successfully!"
                  book:
                    type: object
        "400":
          description: Invalid input data
        "500":
          description: Internal server error

  /api/books/{id}:
    get:
      summary: Get an books by ID
      tags:
        - books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Book details
          content:
            application/json:
              schema:
                type: object
              properties: {}
        "404":
          description: Books not found

    put:
      summary: Update a Book by ID
      tags:
        - books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            properties:
              actorName:
                type: string
            example:
              {
                "bookName": "",
                "description": "",
                "price": 56,
                "categoryName": "",
                "actorName": " ",
                "origin": "",
                "image": "",
                "quantity": 30,
              }
      responses:
        "200":
          description: Book updated successfully
        "404":
          description: Book not found

    delete:
      summary: Delete an books by ID
      tags:
        - books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Book deleted successfully
        "404":
          description: Book id don't exits
        "400":
          description: Bad resquest in data

  #API Category============================================
  /api/categories:
    get:
      summary: Get all categories
      tags:
        - categories
      responses:
        "200":
          description: List of all categories
          content:
            application/json:
              schema:
                type: array

    post:
      summary: Create a new category
      tags:
        - categories
      description: Create a new category.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryName:
                  type: string
              required:
                - categoryName
      responses:
        "201":
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Category created successfully!"
                  book:
                    type: object
        "400":
          description: Invalid input data
        "500":
          description: Internal server error

  /api/categories/{id}:
    get:
      summary: Get a category by ID
      tags:
        - categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Category details
          content:
            application/json:
              schema:
                type: object
              properties: {}
        "404":
          description: Category not found
    put:
      summary: Update a category by ID
      tags:
        - categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            properties:
              actorName:
                type: string
            example: { "categoryName": "" }
      responses:
        "200":
          description: Category updated successfully!!!
        "404":
          description: Category not found!!!

    delete:
      summary: Delete a category by ID
      tags:
        - categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Category deleted successfully
        "404":
          description: Category id don't exits
        "400":
          description: Bad resquest in data

  #API Invoices============================================
  /api/invoices:
    get:
      summary: Get all invoices
      tags:
        - invoices
      responses:
        "200":
          description: List of all invoices
          content:
            application/json:
              schema:
                type: array

    post:
      summary: Create a new invoice
      tags:
        - invoices
      description: Create a new invoice.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userID:
                  type: string
                  description: ID of the user creating the invoice
                paymentID:
                  type: string
                  description: ID of the payment method used
                totalPrice:
                  type: number
                  description: Total price of the order
                items:
                  type: array
                  description: List of purchased books
                  items:
                    type: object
                    properties:
                      bookID:
                        type: string
                        description: ID of the book
                      quantity:
                        type: integer
                        description: Quantity of the book being purchased
                      price:
                        type: integer
                        description: Price of the book
              required:
                - userID
                - paymentID
                - totalPrice
                - items
              example:
                paymentID: "67a4845d7d4d9186133c9a52"
                totalPrice: 78000
                items:
                  - bookID: "67ac87bcfeebb0ff7141cc20"
                    quantity: 2
                    price: 39000
      responses:
        201:
          description: Invoice created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  invoice:
                    type: object
                    properties:
                      _id:
                        type: string
                      userID:
                        type: string
                      paymentID:
                        type: string
                      totalPrice:
                        type: number
        400:
          description: Bad request
        404:
          description: Book not found

      responses:
        "201":
          description: Invoice created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invoice created successfully!"
                  book:
                    type: object
        "400":
          description: Invalid input data
        "500":
          description: Internal server error

  /api/invoices/{id}:
    get:
      summary: Get an invoice by ID
      tags:
        - invoices
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Invoice details
          content:
            application/json:
              schema:
                type: object
              properties: {}
        "404":
          description: invoice not found

    delete:
      summary: Delete an invoice by ID
      tags:
        - invoices
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Invoice deleted successfully
        "404":
          description: Invoice id don't exits
        "400":
          description: Bad resquest in data

#API Invoices Details============================================
  /api/invoicedetails:
    get:
      summary: Get all invoice details
      tags:
        - invoiceDetails
      responses:
        "200":
          description: List of all invoice details
          content:
            application/json:
              schema:
                type: array

    # post:
    #   summary: Create a new invoice details
    #   tags:
    #     - invoiceDetails
    #   description: Create a new invoice details.
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           type: object
    #           properties:
    #             invoiceID:
    #               type: objectId
    #             bookID:
    #               type: onjectId
    #             quantity:
    #               type: Number
    #             price:
    #               type: Number
    #           required:
    #             - invoiceID
    #             - bookID
    #             - quantity
    #             - price
    #           example: { "invoiceID": "", bookID: "", quantity: 1, price: 100 }
    #   responses:
    #     "201":
    #       description: invoice details created successfully
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               message:
    #                 type: string
    #                 example: "invoice details created successfully!"
    #               book:
    #                 type: object
    #     "400":
    #       description: Invalid input data
    #     "500":
    #       description: Internal server error

  /api/invoicedetails/{id}:
    get:
      summary: Get an invoice details by ID
      tags:
        - invoiceDetails
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string 
      responses:
        "200":
          description: Invoice details
          content:
            application/json:
              schema:
                type: object
              properties: {}
        "404":
          description: invoice details not found

    delete:
      summary: Delete an invoice details by ID
      tags:
        - invoiceDetails
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Invoice deleted successfully
        "404":
          description: Invoice id don't exits
        "400":
          description: Bad resquest in data

    put:
      summary: Update an invoice details by ID
      tags:
        - invoiceDetails
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            properties:
              quantity:
                type: number
            example: {  quantity: 1 }
      responses:
        "200":
          description: invoice details updated successfully
        "404":
          description: invoice details not found